#!/usr/bin/env bash

# Define color escape codes
RED="\e[31m"
GREEN="\e[32m"
YELLOW="\e[33m"
BLUE="\e[34m"
RESET="\e[0m"

verbose=false

# Check if the script is running as root
if [ "$EUID" -ne 0 ]; then
    echo -e "${RED}Script must be run as root.${RESET}"

    # Re run with sudo privileges
    echo -e "${YELLOW}Re-running with root privileges........${RESET}\n"
    sudo "$0" "$@"
    exit $?
fi

while [[ $# -gt 0 ]]; do
    case "$1" in
        -v|--verbose)
            verbose=true
            shift
            ;;
        *)
            IP="$1"
            shift
            ;;
    esac
done


# Check if an IP address is provided
if [ -z "$IP" ]; then
    echo -e "${RED}Usage: $0 <IP> [-v|--verbose]${RESET}"
    exit 1
fi


if [ ! -d "nmap" ]; then
    mkdir "nmap"
fi

print_and_execute_command() {
    local command="$1"
    echo -e "${BLUE}${command}${RESET}\n\n"
    eval "$command"
}

# Function to perform a full port TCP scan
tcp_full_scan() {
    echo -e "\n${GREEN}[+] Starting full port nmap TCP scan${RESET}\n"
    nmap_verbose_option=""
    if [ "$verbose" == true ]; then
        nmap_verbose_option="-v"
    fi
    print_and_execute_command "nmap $nmap_verbose_option -p- -Pn -T4 --min-rate 1000 --max-retries 5 -oN \"nmap/fullScan_$IP.nmap\" \"$IP\""

    # Changing `open|filtered` to `open` to avoid unwanted output
    open_tcp_ports=$(grep -E 'open' "nmap/fullScan_$IP.nmap" | grep -v 'no-response' | awk -F/ '{print $1}' | paste -sd "," - )

    if [ -n "$open_tcp_ports" ]; then
        echo -e "${YELLOW}[*] Open TCP ports: ${open_tcp_ports}${RESET}\n"
        echo -e "${GREEN}[+] Starting script and service scan for open TCP ports${RESET}\n"
        print_and_execute_command "nmap $nmap_verbose_option -Pn -p\"$open_tcp_ports\" -sV -sC -T4 -oA \"nmap/$IP\" \"$IP\""
    else
        echo -e "\n$[X] {RED}No open TCP ports found.${RESET}\n"
    fi
}

# Function to perform a UDP scan
udp_scan() {
    echo -e "\n\n${GREEN}[+] Starting UDP scan for top 30 ports${RESET}\n"
    nmap_verbose_option=""
    if [ "$verbose" == true ]; then
        nmap_verbose_option="-v"
    fi
    print_and_execute_command "nmap $nmap_verbose_option -Pn -sU --top-ports 30 -oN \"nmap/udpScan_$IP.nmap\" \"$IP\""

    # Changing `open|filtered` to `open` to avoid unwanted output
    open_udp_ports=$(grep -E 'open' "nmap/udpScan_$IP.nmap" | grep -v 'no-response' | awk -F/ '{print $1}' | paste -sd "," - )

    if [ -n "$open_udp_ports" ]; then
        echo -e "${YELLOW}[*] Open UDP ports: ${open_udp_ports}${RESET}\n"
        echo -e "${GREEN}[+] Starting script and service scan for open UDP ports${RESET}\n"
        print_and_execute_command "nmap $nmap_verbose_option -Pn -sU -pU:\"$open_udp_ports\" -sV -sC -T4 -oA \"nmap/udp_$IP\" \"$IP\" --open"
    else
        echo -e "\n${RED}[X] No open UDP ports found.${RESET}\n"
    fi
}

# Call the functions to perform the scans
# Added an echo to fix the eval issue from previous command 
tcp_full_scan
echo ""
udp_scan

if [ -n "$SUDO_USER" ]; then
    echo -e "\n${GREEN}[+] Changing ownership of nmap dir to $SUDO_USER\n${RESET}"
    sudo chown -R "$SUDO_USER:$SUDO_USER" "nmap"
fi
